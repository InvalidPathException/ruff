from typing import Any, Iterable, SupportsIndex, Protocol, TypeVar

class range:
    def __init__(self, x): ...
    def __iter__(self): ...

class object:
    def __new__(cls): ...
    def __init__(self) -> None: ...
    @property
    def __class__(self): ...
    @property.setter
    def __class__(self, value) -> None: ...
    def __str__(self) -> str: ...

class int:
    def __init__(self, x): ...
    def __index__(self) -> int: ...
    def __pow__(self, other: int, /) -> int: ...

class bool(int): ...

T = TypeVar("T")

class Iterable(Protocol[T]):
    def __iter__(self): ...

class str(Iterable[str]): ...
class tuple:
    def __len__(self) -> int: ...

class bytes: ...
class memoryview: ...
class type: ...

class list:
    def __len__(self) -> int: ...

class property:
    def setter(self, fset, /) -> property: ...

def isinstance(a, b) -> bool: ...
def issubclass(a, b) -> bool: ...
