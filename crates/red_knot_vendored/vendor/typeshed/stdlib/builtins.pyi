from typing import Self, Callable, Any, Iterator

class range:
    def __iter__(self) -> Iterator[int]: ...

class object:
    def __new__(cls) -> Self: ...
    def __init__(self) -> None: ...
    @property
    def __class__(self) -> type[Self]: ...
    @property.setter
    def __class__(self, value: type[Self]) -> None: ...

class int:
    def __index__(self) -> int: ...
    def __pow__(self, other: int, /) -> int: ...

class bool(int): ...
class str: ...

class tuple:
    def __len__(self) -> int: ...

class bytes: ...
class memoryview: ...
class type: ...

class list:
    def __len__(self) -> int: ...

class property:
    def setter(self, fset: Callable[[Any, Any], None], /) -> property: ...

def isinstance(a, b) -> bool: ...
def issubclass(a, b) -> bool: ...
